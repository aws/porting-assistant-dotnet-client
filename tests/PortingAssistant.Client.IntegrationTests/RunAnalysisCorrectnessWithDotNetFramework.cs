using System;
using System.IO;
using System.IO.Compression;
using System.Diagnostics;
using NUnit.Framework;
using PortingAssistant.Client.IntegrationTests.TestUtils;

namespace PortingAssistant.Client.IntegrationTests
{
    public class RunAnalysisCorrectnessWithDotNetFrameworkTests : CorrectnessTestBase
    {
        private string _testSolutionPath;
        private string _expectedAnalysisResultRootDir;
        private string _actualAnalysisResultRootDir_WithoutCache;
        private string _actualAnalysisResultRootDir_WithCache;

        [OneTimeSetUp]
        public override void OneTimeSetUp()
        {
            base.OneTimeSetUp();

            _expectedAnalysisResultRootDir = Path.Combine(
                _testDirectoryRoot, "TestProjects");

            // Copy test project to temp directories
            using (ZipArchive archive = ZipFile.Open(
                _testProjectZipPath, ZipArchiveMode.Read))
            {
                archive.ExtractToDirectory(_tmpTestFixturePath_FirstRun);
            }
            using (ZipArchive archive = ZipFile.Open(
                       _testProjectZipPath, ZipArchiveMode.Read))
            {
                archive.ExtractToDirectory(_tmpTestFixturePath_SecondRun);
            }

            // Get directories where results will be stored
            _actualAnalysisResultRootDir_WithoutCache = _tmpTestFixturePath_FirstRun;
            _testSolutionPath = Path.Combine(
                _tmpTestFixturePath_FirstRun,
                "NetFrameworkExample",
                "NetFrameworkExample.sln");
            _actualAnalysisResultRootDir_WithCache = _tmpTestFixturePath_SecondRun;
            _testSolutionPath = Path.Combine(
                _tmpTestFixturePath_FirstRun,
                "NetFrameworkExample",
                "NetFrameworkExample.sln");

            // Delete any cache files
            CacheUtils.CleanupCacheFiles();

            // Run analysis twice
            RunCLIToAnalyzeSolution(_actualAnalysisResultRootDir_WithoutCache); // Without cache
            RunCLIToAnalyzeSolution(_actualAnalysisResultRootDir_WithCache);    // With cache
        }

        [Test]
        public void FrameworkProjectAnalysisProduceExpectedJsonResult()
        {
            Assert.IsTrue(Directory.Exists(Path.Combine(
                _actualAnalysisResultRootDir_WithoutCache, "NetFrameworkExample-analyze")));
            ValidateSchemas();

            // Note: The report generated by our analysis will change if the packages in our test projects
            //       publish new versions. To combat this, our analysis report comparison uses a subset
            //       comparison to determine correctness, i.e. the generated file should contain all of
            //       the content in the static file and should not remove anything.
            VerifyCorrectnessOfAnalysisWithoutCache();
        }

        [Test]
        public void AnalysesWithAndWithoutCacheProduceTheSameResults()
        {
            Assert.IsTrue(Directory.Exists(Path.Combine(
                _actualAnalysisResultRootDir_WithoutCache, "NetFrameworkExample-analyze")));
            Assert.IsTrue(Directory.Exists(Path.Combine(
                _actualAnalysisResultRootDir_WithCache, "NetFrameworkExample-analyze")));
            
            VerifyAnalysesWithAndWithoutCacheProduceTheSameResults();
        }


        private void RunCLIToAnalyzeSolution(string outputPath)
        {
            try
            {
                // Start the process with the info we specified.
                // Call WaitForExit and then the using statement will close.
                using (Process exeProcess = Process.Start(Path.Combine(_testDirectoryRoot, "PortingAssistant.Client.CLI.exe"), $"assess -s {_testSolutionPath} -o {outputPath} -t netcoreapp3.1 -a FullAssessment"))
                {
                    exeProcess.WaitForExit(1000000);
                }
            }
            catch
            {
                Console.WriteLine("Fail to execute PA Client CLI!");
                Assert.Fail();
            }
        }

        private void VerifyCorrectnessOfAnalysisWithoutCache()
        {
            var expectedPackageAnalysisPath = Path.Combine(
                _expectedAnalysisResultRootDir,
                "NetFrameworkExample-analyze",
                "NetFrameworkExample-package-analysis.json");
            var actualPackageAnalysisPath = Path.Combine(
                _actualAnalysisResultRootDir_WithoutCache,
                "NetFrameworkExample-analyze",
                "solution-analyze",
                "NetFrameworkExample",
                "NetFrameworkExample-package-analysis.json");
            var propertiesToBeRemovedInPackageAnalysisResult = new string[] { };

            // TODO: Review w/ V2 update
            //Assert.IsTrue(JsonUtils.IsJsonFileSubset(
            //    expectedPackageAnalysisPath, 
            //    actualPackageAnalysisPath,
            //    propertiesToBeRemovedInPackageAnalysisResult), "Package analysis did not match expected");

            var expectedApiAnalysisPath = Path.Combine(
                _expectedAnalysisResultRootDir,
                "NetFrameworkExample-analyze",
                "NetFrameworkExample-api-analysis.json");
            var actualApiAnalysisPath = Path.Combine(
                _actualAnalysisResultRootDir_WithoutCache,
                "NetFrameworkExample-analyze",
                "solution-analyze",
                "NetFrameworkExample",
                "NetFrameworkExample-api-analysis.json");
            var propertiesToBeRemovedInApiAnalysisResult = new [] { "SourceFilePath", "Path", "TextChanges" };
            var areEqual = JsonUtils.AreTwoJsonFilesEqual(
                expectedApiAnalysisPath, 
                actualApiAnalysisPath,
                propertiesToBeRemovedInApiAnalysisResult);
            Assert.IsTrue(areEqual, "API analysis did not match expected");
        }
        
        private void VerifyAnalysesWithAndWithoutCacheProduceTheSameResults()
        {
            var actualPackageAnalysisPathWithoutCache = Path.Combine(
                _actualAnalysisResultRootDir_WithoutCache,
                "NetFrameworkExample-analyze",
                "solution-analyze",
                "NetFrameworkExample",
                "NetFrameworkExample-package-analysis.json");
            var actualPackageAnalysisPathWithCache = Path.Combine(
                _actualAnalysisResultRootDir_WithCache,
                "NetFrameworkExample-analyze",
                "solution-analyze",
                "NetFrameworkExample",
                "NetFrameworkExample-package-analysis.json");
            var propertiesToBeRemovedInPackageAnalysisResults = new[] { "SourceFilePath", "Path", "TextChanges" };
            var arePackageResultsEqual = JsonUtils.AreTwoJsonFilesEqual(
                actualPackageAnalysisPathWithoutCache,
                actualPackageAnalysisPathWithCache,
                propertiesToBeRemovedInPackageAnalysisResults);
            Assert.IsTrue(arePackageResultsEqual, "Package analysis results did not match.");

            var actualApiAnalysisPathWithoutCache = Path.Combine(
                _expectedAnalysisResultRootDir,
                "NetFrameworkExample-analyze",
                "NetFrameworkExample-api-analysis.json");
            var actualApiAnalysisPathWithCache = Path.Combine(
                _actualAnalysisResultRootDir_WithoutCache,
                "NetFrameworkExample-analyze",
                "solution-analyze",
                "NetFrameworkExample",
                "NetFrameworkExample-api-analysis.json");
            var propertiesToBeRemovedInApiAnalysisResults = new[] { "SourceFilePath", "Path", "TextChanges" };
            var areApiResultsEqual = JsonUtils.AreTwoJsonFilesEqual(
                actualApiAnalysisPathWithoutCache,
                actualApiAnalysisPathWithCache,
                propertiesToBeRemovedInApiAnalysisResults);
            Assert.IsTrue(areApiResultsEqual, "API analysis results did not match.");
        }

        private void ValidateSchemas()
        {
            string actualPackageAnalysisPath = Path.Combine(
                _actualAnalysisResultRootDir_WithoutCache,
                "NetFrameworkExample-analyze",
                "solution-analyze",
                "NetFrameworkExample",
                "NetFrameworkExample-package-analysis.json");
            string packageAnalysisSchemaPath = Path.Combine(
               _expectedAnalysisResultRootDir,
               "Schemas",
               "package-analysis-schema.json");
            Assert.IsTrue(JsonUtils.ValidateSchema(actualPackageAnalysisPath, packageAnalysisSchemaPath, true), "Package analysis schema does not match expected");

            string actualApiAnalysisPath = Path.Combine(
                _actualAnalysisResultRootDir_WithoutCache,
                "NetFrameworkExample-analyze",
                "solution-analyze",
                "NetFrameworkExample",
                "NetFrameworkExample-api-analysis.json");
            string apiAnalysisSchemaPath = Path.Combine(
               _expectedAnalysisResultRootDir,
               "Schemas",
               "api-analysis-schema.json");
            Assert.IsTrue(JsonUtils.ValidateSchema(actualApiAnalysisPath, apiAnalysisSchemaPath, false), "API analysis schema does not match expected");
        }

        [Test]
        public void JsonDiffTest()
        {
            string apiAnalysisPath = Path.Combine(
                _expectedAnalysisResultRootDir,
                "NetFrameworkExample-analyze",
                "NetFrameworkExample-api-analysis.json");
            string apiAnalysisSchemaPath = Path.Combine(
                _expectedAnalysisResultRootDir,
                "Schemas",
                "api-analysis-schema.json");
            string[] propertiesToBeRemovedInApiAnalysisResult = Array.Empty<string>();
            bool comparisonResult = JsonUtils.AreTwoJsonFilesEqual(
                apiAnalysisPath, apiAnalysisSchemaPath,
                propertiesToBeRemovedInApiAnalysisResult);

            Assert.IsFalse(comparisonResult, "API analysis did not detect difference as expected.");
        }
    }
}
